name: CI/CD Pipeline for React Frontend Dev

on:
  push:
    branches:
      - main
      - staging

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

      - name: Set Dynamic Environment Variables
        run: |
          # Tentukan MAPPING berdasarkan branch
          if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            MAPPING=${{ secrets.TENANT_FOLDER_MAPPING_STAGING }}
          else
            MAPPING=${{ secrets.TENANT_FOLDER_MAPPING_PRODUCTION }}
          fi
          if [ -z "$MAPPING" ]; then
            echo "TENANT_FOLDER_MAPPING is not set for this branch"
            exit 1
          fi
          IFS=',' read -r -a mapping_array <<< "$MAPPING"
          # Tentukan BASE_URL berdasarkan branch
          if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            BASE_URL="https://api-example.go-village.id"
          else
            BASE_URL="https://api-backend.go-village.id"
          fi
          for entry in "${mapping_array[@]}"; do
            IFS=':' read -r tenant folder <<< "$entry"
            echo "Building for tenant: $tenant with folder: $folder"
            # Buat file .env untuk setiap tenant
            echo "VITE_BASE_URL=$BASE_URL" > .env.$tenant
            echo "VITE_TENANTS=$tenant" >> .env.$tenant
            echo "VITE_ENVIRONMENT=${{ github.ref == 'refs/heads/staging' && 'staging' || 'production' }}" >> .env.$tenant
            echo "VITE_TOKEN_KIOSK='0088-9900-RAAA'" >> .env.$tenant
            # Build untuk setiap tenant
            mv .env.$tenant .env
            npm run build -- --outDir build/$tenant
            mv .env .env.$tenant
          done

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: build/
          retention-days: 1

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: build/

      - name: Debug Downloaded Artifact
        run: ls -la build/ || echo "Downloaded artifact folder not found"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_NEW }}

      - name: Add SSH Host Key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 2223 go-village.id >> ~/.ssh/known_hosts

      - name: Deploy to Staging
        if: github.ref == 'refs/heads/staging'
        run: |
          # Ambil pemetaan tenant ke folder
          MAPPING=${{ secrets.TENANT_FOLDER_MAPPING_STAGING }}
          if [ -z "$MAPPING" ]; then
            echo "TENANT_FOLDER_MAPPING_STAGING is not set"
            exit 1
          fi

          # Pecah pemetaan menjadi array
          IFS=',' read -r -a mapping_array <<< "$MAPPING"

          # Loop untuk setiap pemetaan
          for entry in "${mapping_array[@]}"; do
            # Pecah tenant dan folder
            IFS=':' read -r tenant folder <<< "$entry"
            echo "Deploying tenant: $tenant to folder: $folder"
            DEPLOY_PATH="/home/govy6997/public_html/staging/$folder"
            echo "Creating directory if not exists and cleaning up: $DEPLOY_PATH"
            ssh -p 2223 govy6997@go-village.id "if [ ! -d \"$DEPLOY_PATH\" ]; then mkdir -p \"$DEPLOY_PATH\"; fi; rm -rf \"$DEPLOY_PATH\"/*"
            echo "Copying files to $DEPLOY_PATH"
            scp -r -P 2223 build/$tenant/* govy6997@go-village.id:"$DEPLOY_PATH"/
          done

      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        run: |
          MAPPING=${{ secrets.TENANT_FOLDER_MAPPING_PRODUCTION }}
          if [ -z "$MAPPING" ]; then
            echo "TENANT_FOLDER_MAPPING_PRODUCTION is not set"
            exit 1
          fi
          IFS=',' read -r -a mapping_array <<< "$MAPPING"
          # Loop untuk setiap pemetaan
          for entry in "${mapping_array[@]}"; do
            # Pecah tenant dan folder
            IFS=':' read -r tenant folder <<< "$entry"
            echo "Deploying tenant: $tenant to folder: $folder"
            DEPLOY_PATH="/home/govy6997/public_html/staging/$folder"
            ssh -p 2223 govy6997@go-village.id << 'EOF'
            if [ ! -d "$DEPLOY_PATH" ]; then
              mkdir -p "$DEPLOY_PATH"
            fi
            rm -rf "$DEPLOY_PATH"/*
            EOF
            scp -r -P 2223 build/$tenant/* govy6997@go-village.id:"$DEPLOY_PATH"/
          done
